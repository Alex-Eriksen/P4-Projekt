// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wizard_Battle_Web_API.Database;

#nullable disable

namespace Wizard_Battle_Web_API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"), 1L, 1);

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("Last_Login")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nick@test.com",
                            Last_Login = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$10$lHlCZRj4.DPBvhLKz13IQe8T0NALIPXkSx173pUFLOkgkZC70/31q"
                        },
                        new
                        {
                            AccountID = 2,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alex@test.com",
                            Last_Login = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$10$T91em0s7.GoJ.5Dhefj56Os.5PMUKnsXxDThunFUJvaEBJi4wbmhy"
                        },
                        new
                        {
                            AccountID = 3,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mart@test.com",
                            Last_Login = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$10$LPh8MAGQNNuczPD8wWSXk.PuQIxgQ2yk/Lsodvi7IR7tfX72EGGtC"
                        },
                        new
                        {
                            AccountID = 4,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marc@test.com",
                            Last_Login = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "$2a$10$LVeqP2tqC5eV6V4aChMui.BxGBLqnqSDyHZPfTzqYlabHHXUgDAba"
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Friendship", b =>
                {
                    b.Property<int>("MainPlayerID")
                        .HasColumnType("int");

                    b.Property<int>("FriendPlayerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.HasKey("MainPlayerID", "FriendPlayerID");

                    b.HasIndex("FriendPlayerID");

                    b.ToTable("Friendship");

                    b.HasData(
                        new
                        {
                            MainPlayerID = 1,
                            FriendPlayerID = 2,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9047),
                            IsPending = false
                        },
                        new
                        {
                            MainPlayerID = 1,
                            FriendPlayerID = 3,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9060),
                            IsPending = false
                        },
                        new
                        {
                            MainPlayerID = 1,
                            FriendPlayerID = 4,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9067),
                            IsPending = false
                        },
                        new
                        {
                            MainPlayerID = 2,
                            FriendPlayerID = 3,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9074),
                            IsPending = false
                        },
                        new
                        {
                            MainPlayerID = 2,
                            FriendPlayerID = 4,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9082),
                            IsPending = false
                        },
                        new
                        {
                            MainPlayerID = 3,
                            FriendPlayerID = 4,
                            Created_At = new DateTime(2022, 11, 21, 11, 32, 33, 355, DateTimeKind.Utc).AddTicks(9090),
                            IsPending = false
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Icon", b =>
                {
                    b.Property<int>("IconID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IconID"), 1L, 1);

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IconID");

                    b.ToTable("Icon");

                    b.HasData(
                        new
                        {
                            IconID = 1,
                            IconName = "../../../../assets/player-icons/wizard1.png"
                        },
                        new
                        {
                            IconID = 2,
                            IconName = "../../../../assets/player-icons/wizard2.png"
                        },
                        new
                        {
                            IconID = 3,
                            IconName = "../../../../assets/player-icons/wizard3.png"
                        },
                        new
                        {
                            IconID = 4,
                            IconName = "../../../../assets/player-icons/wizard4.png"
                        },
                        new
                        {
                            IconID = 5,
                            IconName = "../../../../assets/player-icons/alex.png"
                        },
                        new
                        {
                            IconID = 6,
                            IconName = "../../../../assets/player-icons/alex-glasses.png"
                        },
                        new
                        {
                            IconID = 7,
                            IconName = "../../../../assets/player-icons/alex-mustache.png"
                        },
                        new
                        {
                            IconID = 8,
                            IconName = "../../../../assets/player-icons/alex-gangster.png"
                        },
                        new
                        {
                            IconID = 9,
                            IconName = "../../../../assets/player-icons/alex-impersonator.jpg"
                        },
                        new
                        {
                            IconID = 10,
                            IconName = "../../../../assets/player-icons/nick-gangster.png"
                        },
                        new
                        {
                            IconID = 11,
                            IconName = "../../../../assets/spell-icons/fireball.png"
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"), 1L, 1);

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MessageID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<long>("AvgDamage")
                        .HasColumnType("bigint");

                    b.Property<long>("AvgSpellsHit")
                        .HasColumnType("bigint");

                    b.Property<long>("ExperiencePoints")
                        .HasColumnType("bigint");

                    b.Property<int>("IconID")
                        .HasColumnType("int");

                    b.Property<long>("KnowledgePoints")
                        .HasColumnType("bigint");

                    b.Property<long>("MatchLosses")
                        .HasColumnType("bigint");

                    b.Property<long>("MatchWins")
                        .HasColumnType("bigint");

                    b.Property<double>("MaxHealth")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PlayerStatus")
                        .HasColumnType("nvarchar(32)");

                    b.Property<long>("TimeCapsules")
                        .HasColumnType("bigint");

                    b.Property<long>("TimePlayedMin")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("IconID");

                    b.HasIndex("PlayerName")
                        .IsUnique()
                        .HasFilter("[PlayerName] IS NOT NULL");

                    b.ToTable("Player");

                    b.HasData(
                        new
                        {
                            PlayerID = 1,
                            AccountID = 1,
                            AvgDamage = 150L,
                            AvgSpellsHit = 13L,
                            ExperiencePoints = 167L,
                            IconID = 1,
                            KnowledgePoints = 10L,
                            MatchLosses = 10L,
                            MatchWins = 20L,
                            MaxHealth = 10.0,
                            MaxMana = 10.0,
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerName = "NickTheG",
                            PlayerStatus = "Offline",
                            TimeCapsules = 1000L,
                            TimePlayedMin = 120L
                        },
                        new
                        {
                            PlayerID = 2,
                            AccountID = 2,
                            AvgDamage = 122L,
                            AvgSpellsHit = 11L,
                            ExperiencePoints = 139L,
                            IconID = 2,
                            KnowledgePoints = 10L,
                            MatchLosses = 7L,
                            MatchWins = 12L,
                            MaxHealth = 10.0,
                            MaxMana = 10.0,
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerName = "AlexTheG",
                            PlayerStatus = "Offline",
                            TimeCapsules = 10L,
                            TimePlayedMin = 75L
                        },
                        new
                        {
                            PlayerID = 3,
                            AccountID = 3,
                            AvgDamage = 133L,
                            AvgSpellsHit = 12L,
                            ExperiencePoints = 138L,
                            IconID = 3,
                            KnowledgePoints = 10L,
                            MatchLosses = 5L,
                            MatchWins = 9L,
                            MaxHealth = 10.0,
                            MaxMana = 10.0,
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerName = "MartinTheG",
                            PlayerStatus = "Offline",
                            TimeCapsules = 10L,
                            TimePlayedMin = 59L
                        },
                        new
                        {
                            PlayerID = 4,
                            AccountID = 4,
                            AvgDamage = 99L,
                            AvgSpellsHit = 7L,
                            ExperiencePoints = 137L,
                            IconID = 4,
                            KnowledgePoints = 10L,
                            MatchLosses = 7L,
                            MatchWins = 4L,
                            MaxHealth = 10.0,
                            MaxMana = 10.0,
                            Modified_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerName = "MarcoTheG",
                            PlayerStatus = "Offline",
                            TimeCapsules = 10L,
                            TimePlayedMin = 43L
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenID"), 1L, 1);

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("Expires_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("Revoked_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RefreshTokenID");

                    b.HasIndex("AccountID");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SkinItem", b =>
                {
                    b.Property<int>("SkinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinID"), 1L, 1);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SkinDescription")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SkinName")
                        .HasColumnType("nvarchar(60)");

                    b.Property<short>("SkinPrice")
                        .HasColumnType("smallint");

                    b.HasKey("SkinID");

                    b.ToTable("Skin");

                    b.HasData(
                        new
                        {
                            SkinID = 1,
                            ImageName = "../../../../assets/skin-images/wise-wizard.jpg",
                            SkinDescription = "A very wise wizard",
                            SkinName = "Wise Wizard",
                            SkinPrice = (short)125
                        },
                        new
                        {
                            SkinID = 2,
                            ImageName = "../../../../assets/skin-images/evil-wizard.jpg",
                            SkinDescription = "A very evil wizard",
                            SkinName = "Evil Wizard",
                            SkinPrice = (short)125
                        },
                        new
                        {
                            SkinID = 3,
                            ImageName = "../../../../assets/skin-images/suspicious-wizard.jpg",
                            SkinDescription = "A very suspicious wizard",
                            SkinName = "Suspicious Wizard",
                            SkinPrice = (short)125
                        },
                        new
                        {
                            SkinID = 4,
                            ImageName = "../../../../assets/skin-images/robot-wizard.jpg",
                            SkinDescription = "A very unhuman wizard",
                            SkinName = "Robot Wizard",
                            SkinPrice = (short)125
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Spell", b =>
                {
                    b.Property<int>("SpellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellID"), 1L, 1);

                    b.Property<decimal>("CastTime")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("DamageAmount")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("IconID")
                        .HasColumnType("int");

                    b.Property<decimal>("ManaCost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SpellDescription")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpellName")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SpellID");

                    b.HasIndex("IconID");

                    b.ToTable("Spell");

                    b.HasData(
                        new
                        {
                            SpellID = 1,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 1"
                        },
                        new
                        {
                            SpellID = 2,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 2"
                        },
                        new
                        {
                            SpellID = 3,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 3"
                        },
                        new
                        {
                            SpellID = 4,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 4"
                        },
                        new
                        {
                            SpellID = 5,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 5"
                        },
                        new
                        {
                            SpellID = 6,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 6"
                        },
                        new
                        {
                            SpellID = 7,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 7"
                        },
                        new
                        {
                            SpellID = 8,
                            CastTime = 0m,
                            DamageAmount = 0m,
                            IconID = 11,
                            ManaCost = 0m,
                            SpellDescription = "It's a fireball, does it really need a description?",
                            SpellName = "Fireball 8"
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SpellBook", b =>
                {
                    b.Property<int>("SpellBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellBookID"), 1L, 1);

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<string>("SpellBookName")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SpellBookID");

                    b.HasIndex("PlayerID");

                    b.ToTable("SpellBook");

                    b.HasData(
                        new
                        {
                            SpellBookID = 1,
                            PlayerID = 1,
                            SpellBookName = "My SpellBook"
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SpellBookSlot", b =>
                {
                    b.Property<int>("SpellID")
                        .HasColumnType("int");

                    b.Property<int>("SpellBookID")
                        .HasColumnType("int");

                    b.HasKey("SpellID", "SpellBookID");

                    b.HasIndex("SpellBookID");

                    b.ToTable("SpellBookSlot");

                    b.HasData(
                        new
                        {
                            SpellID = 1,
                            SpellBookID = 1
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"), 1L, 1);

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("SkinID")
                        .HasColumnType("int");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("SkinID");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            TransactionID = 1,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlayerID = 1,
                            SkinID = 1,
                            TotalCost = 125
                        });
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Friendship", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "FriendPlayer")
                        .WithMany("Friends")
                        .HasForeignKey("FriendPlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "MainPlayer")
                        .WithMany("MainPlayerFriends")
                        .HasForeignKey("MainPlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FriendPlayer");

                    b.Navigation("MainPlayer");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Message", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "Receiver")
                        .WithMany("FriendMessages")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Player", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Account", "Account")
                        .WithOne("Player")
                        .HasForeignKey("Wizard_Battle_Web_API.Database.Entities.Player", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.RefreshToken", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Account", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Spell", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SpellBook", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "Player")
                        .WithMany("SpellBooks")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SpellBookSlot", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.SpellBook", "SpellBook")
                        .WithMany("SpellBookSlots")
                        .HasForeignKey("SpellBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Spell", "Spell")
                        .WithMany("SpellBookSlots")
                        .HasForeignKey("SpellID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Spell");

                    b.Navigation("SpellBook");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Transaction", b =>
                {
                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.Player", "Player")
                        .WithMany("Transactions")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizard_Battle_Web_API.Database.Entities.SkinItem", "SkinItem")
                        .WithMany("Transactions")
                        .HasForeignKey("SkinID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("SkinItem");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Account", b =>
                {
                    b.Navigation("Player");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Player", b =>
                {
                    b.Navigation("FriendMessages");

                    b.Navigation("Friends");

                    b.Navigation("MainPlayerFriends");

                    b.Navigation("Messages");

                    b.Navigation("SpellBooks");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SkinItem", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.Spell", b =>
                {
                    b.Navigation("SpellBookSlots");
                });

            modelBuilder.Entity("Wizard_Battle_Web_API.Database.Entities.SpellBook", b =>
                {
                    b.Navigation("SpellBookSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
